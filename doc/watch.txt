*watch.nvim*                           A scrollable `watch` alternative for Neovim.

Author: Makaze <christopherslane.work@gmail.com>
License: GPLv3.0

================================================================================
INTRODUCTION                                                             *watch*

|watch.nvim| is a plugin for watching the live output of a shell command in a 
buffer, such as `cat` or `tree`.

Use case:

1. You want to `watch` (continuously check the output of) a command like in the
   linux shell while being able to scroll the output without leaving Neovim.
2. You |watch.start()| or |:WatchStart| a shell command.
3. The command's output is continuously loaded in a buffer at the given refresh
   rate.
4. Watch stops when you call |watch.stop()| or |:WatchStop|, close the buffer, or
   exit Neovim.

For an example, to watch the output of `tree -cdC` in the current directory,
updating every `500` ms:
>lua
    local watch = require("watch")

    watch.start("tree -cdC", 500)
<
Keep in mind that a call to watched command will run in the shell where you
started Neovim.

================================================================================
COMMANDS                                        *watch-commands*, *watch.commands*

*:WatchStart* {command...} [{refresh_rate}]                           *WatchStart*
    Watches a {command...} in a new buffer. The last argument represents the
    refresh rate in millisceconds, or `500` if omitted.

    Parameters: ~
        {command...}    (string)    Shell command to watch.
        {refresh_rate}  (integer)   Time between refreshes in milliseconds.
                                    Defaults to 500.

*:WatchStop* [{command...}]                                            *WatchStop*
    Manually stops the watcher for {command...}. If a command is not given, all
    watchers are stopped.

    Watchers are automatically stopped when closing the buffer or exiting
    Neovim.

    Parameters: ~
        {command...}    (string)    Shell command to stop watching.


================================================================================
LUA API                                                   *watch-api*, *watch.api*

watch.start({command}, [{refresh_rate}], [{bufnr}])              *watch.start()*
    Start a watcher showing the outoput of {command} in a new buffer, reloading
    the contents every |{refresh_rate}| millisceconds.

    Parameters: ~
        {command}       (string)    Shell command to watch.
        {refresh_rate}  (integer)   Time between refreshes in milliseconds.
                                    Defaults to 500.
        {bufnr}         (integer)   The buffer number to load to. Defaults to a
                                    new buffer. 

watch.stop([{event}])                                             *watch.stop()*
    Stop watching a previously started command. {event} matches the autocmd
    event API. If {event} is passed, {event.file} is the command string used
    to find the watcher.

    Parameters: ~
        {event}             (table)     The table passed by an autocommand.
        Required Fields (if passed): ~
            {event.file}    (string)    The name of the buffer. The name of a
                                        watch buffer is the same as the shell
                                        command used to start the watcher.

watch.update({command}, {bufnr})                                *watch.update()*
    Return a function that updates the buffer's contents and preserves the
    cirsor.

    Parameters: ~
        {command}       (string)    Shell command to load to the buffer.
        {bufnr}         (integer)   The buffer number to load to. Defaults to a
                                    new buffer.

    Return: ~
        (function)                  The steps used to update the buffer.

================================================================================

vim: filetype=help expandtab tabstop=4 textwidth=80 colorcolumn=81
