*watch.nvim*                        A scrollable `watch` alternative for Neovim.

Author: Makaze <christopherslane.work@gmail.com>
License: GPLv3.0
Version: 0.1.0

================================================================================
INTRODUCTION                                                             *watch*

|watch.nvim| is a simple plugin for live watching (i.e. continuously rerunning and
check the output of) a shell command in a Neovim buffer.

Use case: ~

1. You want to `watch` (continuously rerun and check the output of) a shell
   command with changing output, while being able to scroll the output, all
   without leaving Neovim.
2. You |watch.start()| or |:WatchStart| a shell command.
3. The command's output is continuously loaded in a buffer at the given refresh
   rate.
4. The watcher stops when you call |watch.stop()| or |:WatchStop|, close the
   buffer, or exit Neovim.

For an example, to watch the output of `tree -cdC` in the current directory,
updating every `500` ms:
>vim
    :WatchStart tree -cdC 500
<
Keep in mind that a watched command will run in the shell where you
started Neovim.

Features: ~
    [x] Customizable refresh rate
    [x] Stop and start at will
    [x] Scrollable output
    [x] Pause watching when in the background

Planned: ~
    [ ] ANSI color support

================================================================================
COMMANDS                                                        *watch-commands*

:WatchStart {command...} {refresh_rate*}                            *WatchStart*
    Watches a {command...} in a new buffer. The last argument represents the
    refresh rate in millisceconds. Refresh defaults to the |watch-config|
    setting if omitted.

    Parameters: ~
        {command...}    (string)    Shell command to watch.
        {refresh_rate}  (integer)   Time between refreshes in milliseconds.
                                    Defaults to 500.

:WatchStop {command...*}                                             *WatchStop*
    Stops watching {command...} and detaches from the buffer. If no
    argument is given, then checks the current buffer. If the current buffer is
    also not attached to a watcher, then prompts the user before stopping all of
    them.

    `WARNING:` If `watch.config.close_on_stop` is set to `true`, then affected
    buffers will also be deleted. See |watch-config| for more information.

    Watchers are also automatically stopped when closing the buffer or exiting
    Neovim.

    Parameters: ~
        {command...}    (string)    Shell command to stop watching.

================================================================================
CONFIGURATION                                                     *watch-config*

|watch.nvim| has two configuration options. Any omitted options will default to
the standard configuration. You can change those options by calling
|watch.setup()|:
>lua
    local watch = require("watch")
    
    watch.setup({
        -------------------- Default configuration -----------------------------
        refresh_rate = 500,     -- The default refresh rate for a new watcher in
                                -- milliseconds. Defaults to `500`.
        close_on_stop = false,  -- Whether to automatically delete the buffer
                                -- when stopping a watcher. Defaults to `false`.
    })
>

================================================================================
LUA API                                                              *watch-api*

watch.setup({opts*})                                             *watch.setup()*
    Used to override configuration options for |watch.nvim|. See |watch-config|
    for examples.

    Parameters: ~
        {opts}          (|watch.ConfigOverride|)
        Keys (all keys optional): ~
                        • `refresh_rate`: (integer) The default refresh rate for
                          a new watcher in milliseconds. Default 500.
                        • `close_on_stop`: (boolean) Whether to automatically
                          delete the buffer when calling |watch.stop()|. Default
                          false.

watch.start({command}, {refresh_rate*}, {bufnr*})               *watch.start()*
    Starts continually reloading a buffer's contents with a shell command. If
    the command is aleady being watched, opens that buffer in the current
    window.

    Parameters: ~
        {command}       (string)    Shell command to watch.
        {refresh_rate}  (integer)   (optional) Time between refreshes in
                                    milliseconds. Defaults to `500`.
        {bufnr}         (integer)   (optional) The buffer number to load to.
                                    Defaults to a new buffer.  

watch.stop({event*})                                              *watch.stop()*
    Stops watching the specified command and detaches from the buffer. If no
    argument is given, then checks the current buffer. If the current buffer is
    also not attached to a watcher, then prompts the user before stopping all of
    them.

    `WARNING:` If `watch.config.close_on_stop` is set to `true`, then affected
    buffers will also be deleted. See |watch-config| for more information.

    Parameters: ~
        {event}         (string|table)  (string) (optional) The command to stop.
                                        (table) (optional) The event table
                                        passed by an autocommand.
        Required keys (if table): ~
                        • `file`: (string) The command to stop. The name of a
                          watch buffer is the same as the command used to start
                          the watcher.

watch.kill({command})                                              *watch.kill()*
    Kills and cleans up a watcher.

    `WARNING:` If `watch.config.close_on_kill` is set to `true`, then affected
    buffers will also be deleted. See |watch-config| for more information.

    Parameters: ~
        {command}       (string)    Shell command of the watcher to kill.

watch.update({command}, {bufnr})                                *watch.update()*
    Returns a function that updates the buffer's contents and preserves the
    cursor. Used internally by |watch.start()|.

    Parameters: ~
        {command}       (string)    Shell command to load to the buffer.
        {bufnr}         (integer)   The buffer number to load to. Defaults to a
                                    new buffer.

    Return: ~
        {updater}       (function)  Steps to take upon rerunning {command}.

================================================================================

vim: filetype=help expandtab tabstop=4 textwidth=80 colorcolumn=81
